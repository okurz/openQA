#!/usr/bin/env perl

use strict;
use warnings;
use IPC::Run qw(timeout);

my $timeout = $ENV{TIMEOUT};

sub run {
   my ($cmd, %args) = @_;
   my ($out, $err) = ('', '');
   $args{timeout} //= $ENV{TIMEOUT} // 4;
   print "RUN: @$cmd, timeout: $args{timeout}\n";
   # this fails now as timeout argument is non-numeric with "60m". Should I
   # parse the values or use numeric only or again use GNU timeout?
   IPC::Run::run $cmd, \undef, \$out, \$err, timeout($args{timeout})
}

my @cmd = @ARGV;
run(\@cmd) ? exit 0 : exit 1 unless $ENV{RETRY};
my $ret;
for my $n (1 .. $ENV{RETRY}) {
    if ($ENV{STABILITY_TEST}) {
        run \@ARGV || exit;
        $ret = 1;
        print "Rerun $n of $ENV{RETRY} …\n";
    }
    else {
        run \@ARGV && last;
        print "Retry $n of $ENV{RETRY} …\n";
    }
}
exit $ret;

1;
