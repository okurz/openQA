#!/usr/bin/env perl

# Copyright (C) 2015-2021 SUSE LLC
# SPDX-License-Identifier: GPL-2.0-or-later

=head1 NAME

dump_templates - dump openQA templates

=head1 SYNOPSIS

dump_templates [OPTIONS] [TABLES...]

=head1 OPTIONS

=over 4

=item B<--host> HOST

connect to specified host, defaults to localhost

=item B<--apibase>

Set API base URL component, default: '/api/v1'

=item B<--apikey> KEY, B<--apisecret> SECRET

Specify api key and secret to use, overrides use of config file ~/.config/openqa/client.conf

override values from config file

=item B<--group> GROUP

dump only specified job group

=item B<--test> NAME

dump only testsuite with specified name

=item B<--machine> NAME

dump only machine with specified name

=item B<--product> NAME

dump only product with specified name

=item B<--full>

when dumping a specific job group also dump related test suites, products and machines

=item B<--json>

dump as json

=item B<--help, -h>

print help

=back

=head1 TABLES

=over 4

=item B<Machines>

=item B<TestSuites>

=item B<Products>

=item B<JobTemplates>

=item B<JobGroups>

=back

=head1 SYNOPSIS

=over 4

=item dump_templates --host openqa.example.com Products

=item dump_templates --host openqa.example.com --group "openSUSE Tumbleweed" --full

=item dump_templates --host openqa.example.com --test "gnome"

=item dump_templates --host openqa.example.com --machine "64bit"

=back

=head1 DESCRIPTION

Dump openQA database tables for Machines TestSuites Products
JobTemplates e.g. to load them on another instance.

=cut

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Mojo::Base -strict, -signatures;

use Data::Dump 'dd';
use Getopt::Long;
use Mojo::Util qw(decamelize);
use Mojo::URL;
use OpenQA::Client;
use OpenQA::YAML 'load_yaml';

Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage ($r) {
    eval "use Pod::Usage; pod2usage($r);";
    die "cannot display help, install perl(Pod::Usage)\n" if $@;
    exit $_[0];
}

GetOptions(
    \%options,  "json",    "host=s",  "apibase=s",  "apikey:s",   "apisecret:s",
    "group=s@", "name=s@", "test=s@", "product=s@", "machine=s@", "full",
    "help|h",
) or usage(1);

usage(0) if $options{help};

my $ret = run(\%options, @ARGV);
exit(defined $ret ? 0 : 1);
