#!/usr/bin/env perl

# Copyright 2014-2021 SUSE LLC
# SPDX-License-Identifier: GPL-2.0-or-later

use FindBin qw($RealBin);
use lib "$RealBin/../lib";

use strict;
use warnings;
use aliased 'DBIx::Class::DeploymentHandler' => 'DH';
use OpenQA::Schema;
use Getopt::Long::Descriptive;
use IO::Dir;
use Fcntl ':mode';
use POSIX qw(setuid setgid);

my $default_script_directory = "$FindBin::RealBin/../dbicdh";
my $script_directory = $default_script_directory;

my ($opt, $usage) = describe_options(
    '%c %o',
    [
        'prepare_upgrades',
        'Create the deployment files used to upgrade the database.'
          . 'Do not forget to increase the version before using this'
          . 'and note those files should be committed to the source repo.'
    ],
    [
        'upgrade_database',
        'Use the generated deployment files created with --prepare_upgrades to actually upgrade a database.'
    ],
    ['force|f', 'Force overwriting existing data'],
    ['user|u=s', 'Change uid before connecting the DB'],
    ['help|h', 'This help message', {shortcircuit => 1}],
);

print($usage->text), exit if $opt->help;
my $prepare_upgrades = $opt->prepare_upgrades;
my $upgrade_database = $opt->upgrade_database;
my $help = $opt->help;
my $force = $opt->force;
my $user = $opt->user;

print("Missing option: Need one of '--prepare_upgrades' or '--upgrade_database'\n" . $usage->text), exit 1
  unless $prepare_upgrades or $upgrade_database;

if ($user) {
    my $uid = getpwnam($user) || die "No such login $user";
    my $gid = getgrnam($user);
    if ($gid) {
        setgid($gid) || die "can't sgid to $user group";
    }
    setuid($uid) || die "can't suid to $user";
}

my $schema = OpenQA::Schema::connect_db(deploy => 0);

my @databases = qw( PostgreSQL );

if ($prepare_upgrades) {
    my $dh = DH->new(
        {
            schema => $schema,
            script_directory => $script_directory,
            databases => \@databases,
            sql_translator_args => {add_drop_table => 0, quote_identifiers => 0},
            force_overwrite => $force,
        });


    my $version = $dh->schema_version;

    my $prev_version = $version - 1;
    my $upgrade_directory = "$prev_version-$version";

    my %upgrade_dir;
    foreach my $db (@databases) {
        tie %upgrade_dir, 'IO::Dir', "$script_directory/$db/upgrade";

        if (exists $upgrade_dir{$upgrade_directory} and not $force) {
            print "The upgrade directory already contains files to upgrade to the current version ($version)\n";
            print "Use the --force option if you want to overwrite the contents of the ";
            print "$script_directory/$db/upgrade/$upgrade_directory directory\n";
            exit 1;
        }
    }

    $dh->prepare_upgrade({from_version => $prev_version, to_version => $version});
}

$schema->deploy($force) if $upgrade_database;
